//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/XRControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""195ee2a4-f6da-4113-9d59-6784ae5dabf4"",
            ""actions"": [
                {
                    ""name"": ""KickLeft"",
                    ""type"": ""Button"",
                    ""id"": ""73ee13cf-38d3-4691-8731-f841ed7ae7b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KickRight"",
                    ""type"": ""Button"",
                    ""id"": ""dc3d88fb-48cc-4260-9498-7bed6518b2e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad170f66-c777-44ed-8635-87ebfc45ecdc"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""175bfaf3-79f9-450f-bc47-2ef2554f93ea"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_KickLeft = m_Gameplay.FindAction("KickLeft", throwIfNotFound: true);
        m_Gameplay_KickRight = m_Gameplay.FindAction("KickRight", throwIfNotFound: true);
    }

    ~@XRControls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, XRControls.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_KickLeft;
    private readonly InputAction m_Gameplay_KickRight;
    public struct GameplayActions
    {
        private @XRControls m_Wrapper;
        public GameplayActions(@XRControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @KickLeft => m_Wrapper.m_Gameplay_KickLeft;
        public InputAction @KickRight => m_Wrapper.m_Gameplay_KickRight;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @KickLeft.started += instance.OnKickLeft;
            @KickLeft.performed += instance.OnKickLeft;
            @KickLeft.canceled += instance.OnKickLeft;
            @KickRight.started += instance.OnKickRight;
            @KickRight.performed += instance.OnKickRight;
            @KickRight.canceled += instance.OnKickRight;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @KickLeft.started -= instance.OnKickLeft;
            @KickLeft.performed -= instance.OnKickLeft;
            @KickLeft.canceled -= instance.OnKickLeft;
            @KickRight.started -= instance.OnKickRight;
            @KickRight.performed -= instance.OnKickRight;
            @KickRight.canceled -= instance.OnKickRight;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnKickLeft(InputAction.CallbackContext context);
        void OnKickRight(InputAction.CallbackContext context);
    }
}
